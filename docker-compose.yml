services:
  api:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    env_file:
      - .env
    depends_on:
      - postgres
      - rabbitmq
      - minio
      - redis
    volumes:
      - ./backend:/app
      - ./models:/app/models  # For AI models
    command: uvicorn app.main:app --host 0.0.0.0 --port 8080 --reload
    environment:
      - PYTHONPATH=/app

  # Primary worker for KYC processing
  worker-kyc:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      - postgres
      - rabbitmq
      - minio
      - redis
    volumes:
      - ./backend:/app
      - ./models:/app/models
    command: celery -A app.workers.celery_app worker --loglevel=info --queues=kyc-processing,ocr-processing,face-processing
    environment:
      - PYTHONPATH=/app

  # Worker for notifications and maintenance
  worker-notifications:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      - postgres
      - rabbitmq
      - redis
    volumes:
      - ./backend:/app
    command: celery -A app.workers.celery_app worker --loglevel=info --queues=notifications,maintenance,monitoring
    environment:
      - PYTHONPATH=/app

  # Worker for blockchain operations
  worker-blockchain:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      - postgres
      - rabbitmq
      - redis
    volumes:
      - ./backend:/app
    command: celery -A app.workers.celery_app worker --loglevel=info --queues=blockchain
    environment:
      - PYTHONPATH=/app

  # Celery beat scheduler for periodic tasks
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      - postgres
      - rabbitmq
      - redis
    volumes:
      - ./backend:/app
      - celery_beat_data:/app/celerybeat
    command: sh -c "celery -A app.workers.celery_app beat --loglevel=info --schedule=/tmp/celerybeat-schedule"
    environment:
      - PYTHONPATH=/app
      - CELERYBEAT_SCHEDULE_FILENAME=/app/celerybeat/celerybeat-schedule

  # Celery flower for monitoring
  celery-flower:
    image: mher/flower:2.0.1
    env_file:
      - .env
    depends_on:
      - rabbitmq
      - redis
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=amqp://${RABBITMQ_USER:-kyc_user}:${RABBITMQ_PASSWORD:-kyc_password}@rabbitmq:5672//
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - FLOWER_PORT=5555

  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-kyc_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-kyc_password}
      POSTGRES_DB: ${POSTGRES_DB:-kyc_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    command: postgres -c shared_preload_libraries=pg_stat_statements -c pg_stat_statements.track=all

  # Redis for caching and Celery backend
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes

  rabbitmq:
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-kyc_user}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-kyc_password}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  minio:
    image: minio/minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-minioadmin}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO client for bucket initialization
  minio-setup:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 10;
      mc alias set local http://minio:9000 ${MINIO_ACCESS_KEY:-minioadmin} ${MINIO_SECRET_KEY:-minioadmin};
      mc mb local/kyc-documents --ignore-existing;
      mc anonymous set download local/kyc-documents;
      "

  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    depends_on:
      - prometheus

  # Elasticsearch for logging and audit trail
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"

  # Kibana for log analysis
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch

  # Nginx reverse proxy for SSL termination and load balancing
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  minio_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:
  celery_beat_data: 